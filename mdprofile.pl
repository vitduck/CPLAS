#!/usr/bin/env perl 

use strict; 
use warnings; 

use Vasp qw(get_line get_potential print_potential :store); 
use Getopt::Long qw(:config bundling);  
use Pod::Usage; 

my @usages = qw(NAME SYSNOPSIS OPTIONS NOTE); 

# POD 
=head1 NAME 

mdprofile.pl: extract the potential profile from OSZICAR  

=head1 SYNOPSIS

mdprofile.pl [-h]

=head1 OPTIONS

=over 8

=item B<-h>

Print the help message and exit.

=back

=head1 NOTE 

If MD is terminated unexpectedly, there will be mistmatch between trajectry and profile.   
Thus, a trajectory generated by xdatcar.pl is mandantory for consistency check. 

=cut

my $help = 0; 

# parse optional arguments 
GetOptions('h' => \$help) or pod2usage(-verbose => 99, -section => \@usages); 

# help message
pod2usage(-verbose => 99, -section => \@usages) if $help; 

# previously generated trajectory 
my $trajectory = 'traj.dat'; 
my $profile    = 'profile.dat'; 

# xyz from traj.dat 
die("Previously generated $trajectory is required for consistency\n") unless -f $trajectory; 
my $r2xyz = retrieve_xyz($trajectory);  

# OSZICAR lines
my @lines = get_line('OSZICAR'); 
my %md = get_potential(\@lines); 

# synchronization two hashses 
my $ntraj = keys %$r2xyz; 
my $nmd   = keys %md; 
if ( $ntraj > $nmd  ) { 
    for my $istep ( keys %$r2xyz ) { 
        delete $r2xyz->{$istep} unless exists $md{$istep}; 
    } 
} elsif ( $ntraj < $nmd ) { 
    for my $istep ( keys %md ) { 
        delete $md{$istep} unless exists $r2xyz->{$istep}; 
    } 
}

# store trajectory to disk 
unless ( $ntraj == $nmd ) { 
    print "=> Mismatch between XDATCAR and OSZICAR\n\n"; 
    save_xyz($r2xyz, $trajectory, 1); 
    print "\n"; 
}

# profile.dat
print "=> Potential profile is written to $profile\n"; 
print_potential(\%md, $profile); 
