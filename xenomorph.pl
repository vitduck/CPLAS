#!/usr/bin/env perl 

use strict; 
use warnings; 

use IO::File; 
use Getopt::Long; 
use Pod::Usage; 

use Gaussian qw( read_gaussian print_gaussian ); 
use GenUtil  qw( read_line eps2png zenburnize set_boundary ); 
use VASP     qw( read_cell read_geometry print_poscar ); 
use XYZ      qw( read_xyz print_xyz ); 

my @usages = qw(NAME SYSNOPSIS OPTIONS); 

# POD 
=head1 NAME 
 
xenomorph.pl: file conversion

=head1 SYNOPSIS

xenomorph.pl [-h] [-i] <input> [-o] <output> [-r] CONTCAR 

=head1 OPTIONS

=over 8

=item B<-h>

Print the help message and exit.

=item B<-i> 

Source input file 

=item B<-o> 

Converted output file

=item B<-r> 

use POSCAR/CONTCAR for reference

=item B<-b> 

Fix boundaries of eps (generated by gnuplot)

=item B<-z> 

With sufficient thrust, pig fly just fine

=back

=cut

# default optional arguments 
my $help     = 0;
my $input    = ''; 
my $output   = ''; 
my $boundary = 0;  
my $zenburn  = 0; 
my $density  = 150; 

# available operation 
my @eps_transform = (); 

# default POSCAR parametes 
my $lat      = [ 
    [ 20.0, 0.00, 0.00 ], 
    [ 0.00, 20.0, 0.00 ], 
    [ 0.00, 0.00, 20.0 ], 
]; 
my $scaling  = 1.0; 
my $dynamics = 0; 
my $type     = 'Cartesian'; 

# gaussian default parameters 
my $option   = ['%chk=file.chk']; 
my $theory   = '# hf/3-21g'; 
my $title    = 'Structure'; 
my $charge   = 0; 
my $spin     = 1; 

# xyz parameters 
my $comment = ''; 

# geometry; 
my ($atom, $natom, $geometry); 

# parse optional arguments 
GetOptions(
    'h'    => \$help, 
    'i=s'  => \$input, 
    'o=s'  => \$output,
    'd=i'  => \$density, 
    'r=s'  => sub { 
        # use reference cell parameters
        my ($opt, $arg) = @_; 
        my $line = read_line($arg); 
        ($title, $scaling, $lat, $atom, $natom, $dynamics, $type) = read_cell($line); 
    }, 
    'b'    => sub { push @eps_transform, \&set_boundary },  
    'z'    => sub { push @eps_transform, \&zenburnizz }, 
) or pod2usage(-verbose => 1); 

# default output 
if ( $help ) { pod2usage(-verbose => 99) }; 

# parse input
my $line = ($input =~ /.*\.(com|gif)$/) ? read_line($input, 'slurp') : read_line($input);  

# quite messy wait to emulate C-style switch
INPUT: { 
    $input =~ /POSCAR/ && do { 
        ($title, $scaling, $lat, $atom, $natom, $dynamics, $type) = read_cell($line); 
        $geometry = read_geometry($line); 
    }; 

    $input =~ /.*\.(com|gif)$/ && do { 
        ($option, $theory, $title, $charge, $spin, $atom, $natom, $geometry) = read_gaussian($line); 
    }; 

    $input =~ /.*\.(xyz)$/ && do { 
        ($comment, $atom, $natom, $geometry) = read_xyz($line); 
    }; 

    $input =~ /.*\.(eps)$/ && do { 
        # performs eps transformation
        for ( @eps_transform ) {  $_->($input) }
    }
}

# output fh 
my $fh = IO::File->new($output, 'w'); 

OUTPUT: { 
    $output =~ /POSCAR/ && do { 
        # force scaling, dynamics and type
        print_poscar($fh, $title, 1.0, $lat, $atom, $natom, 0, 'Cartesian', $geometry); 
    }; 

    $output =~ /.*\.(com|gif)$/ && do { 
        print_gaussian($fh, $option, $theory, $title, 0, 1, $atom, $natom, $geometry);  
    }; 

    $output =~ /.*\.(xyz)$/ && do { 
        print_xyz($fh, $comment, $atom, $natom, $geometry); 
    }; 

    $output =~ /.*\.(png)$/ && do { 
        eps2png($input, $output, $density); 
    }; 
}

# flush 
$fh->close; 
